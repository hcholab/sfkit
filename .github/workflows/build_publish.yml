# This workflow builds, lints, tests and pushes the Docker image into the GitHub Container Registry,
# and publishes a release with a corresponding distributable package.
name: Build and Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_lint_test_push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE: ${{ github.repository }}
      RELEASE: ${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' }}
      PLATFORMS: linux/amd64,linux/amd64/v1,linux/amd64/v2,linux/amd64/v3
      OCI_TAR: dist.tar

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE }}
        tags: |
          type=raw,value=latest

    - name: Build OCI image
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: ${{ env.PLATFORMS }}
        outputs: type=oci,dest=${{ env.OCI_TAR }}

    - name: Download regctl tool
      if: ${{ env.RELEASE }}
      run: |
        curl -Lo regctl https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64
        chmod +x regctl

    - name: Push Docker image
      if: ${{ env.RELEASE }}
      run: |
        regctl image import "${{ steps.meta.outputs.tags }}" "${{ env.OCI_TAR }}"

    - name: Download Crane tool
      uses: imjasonh/setup-crane@v0.3
      if: ${{ env.RELEASE }}

    - name: Publish release archives
      if: ${{ env.RELEASE }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        ./publish_release "${{ env.PLATFORMS }}" "$(pwd)/${{ env.OCI_TAR }}"
